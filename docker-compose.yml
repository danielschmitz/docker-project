services:
  db:
    image: postgres:latest
    container_name: db_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: db_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/pgsql.servers.json
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - backend
    volumes:
      - ./pgsql.servers.json:/pgadmin4/pgsql.servers.json

  migration:
    image: postgres:latest
    container_name: db_migration
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    depends_on:
      - db
    networks:
      - backend
    volumes:
      - ./migration/init.sql:/docker-entrypoint-initdb.d/init.sql
    entrypoint: >
      bash -c "
      until pg_isready -h db -U ${POSTGRES_USER}; do
        echo 'Esperando pelo banco de dados...';
        sleep 2;
      done;
      PGPASSWORD=${POSTGRES_PASSWORD} psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /docker-entrypoint-initdb.d/init.sql
      "
  api:
    image: node:16.13
    container_name: web_api
    working_dir: /app
    command: ["sh", "-c", "npm install && npx prisma generate && node server.js"]
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
    volumes:
      - ./backend/server.js:/app/server.js
      - ./backend/package.json:/app/package.json
      - ./backend/package-lock.json:/app/package-lock.json
      - ./backend/prisma:/app/prisma
      - ./backend/prisma/schema.prisma:/app/prisma/schema.prisma
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      - backend

  mailcatcher:
    image: schickling/mailcatcher
    container_name: web_mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - backend

  swagger:
    image: swaggerapi/swagger-ui
    container_name: web_swagger
    ports:
      - "8081:8080"
    environment:
      - SWAGGER_JSON=/config/swagger-config.json
    volumes:
      - ./backend/swagger-config.json:/config/swagger-config.json
    networks:
      - backend

  frontend:
    image: nginx:latest
    container_name: web_frontend
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - backend

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: web_keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: mydatabase
      DB_USER: user
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8082:8080"
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/realm-export.json
    command:
      - start-dev
      - --import-realm
    depends_on:
      - db
    networks:
      - backend
   

volumes:
  db_data:

networks:
  backend:
    driver: bridge
